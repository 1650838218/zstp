<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tool="http://www.springframework.org/schema/tool" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:repository="http://www.springframework.org/schema/data/repository"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
        http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository-1.5.xsd
        http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
	<!-- 引入jdbc,jpa配置文件 -->    
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
                <value>classpath*:config/*.config.properties</value>  
            </list>  
        </property>  
    </bean>

	<!-- 配置数据源，使用DBCP数据源 
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		 MySQL数据库的驱动 
		<property name="driverClassName" value="${jdbc.driver_class}" />
		 数据库的URL 
		<property name="url" value="${jdbc.connection.url}" />
		 指定数据库的用户名 
		<property name="username" value="${jdbc.connection.username}" />
		 指定数据库的密码 
		<property name="password" value="${jdbc.connection.password}"/>
		 指定数据库的最大连接数 
		<property name="maxActive" value="${jdbc.connection.maxActive}"/>
		 指定数据库的最大空闲连接数 
		<property name="maxIdle" value="${jdbc.connection.maxIdle}"/>
		 指定数据库的最大等待数 
		<property name="maxWait" value="${jdbc.connection.maxWait}"/>
		 指定数据库的默认自动提交 
		<property name="defaultAutoCommit" value="${jdbc.connection.defaultAutoCommit}"/>
		 指定数据库的连接超时时是否启动删除 
		<property name="removeAbandoned" value="${jdbc.connection.removeAbandoned}"/>
		 指定数据库的删除数据库连接的超时时长 
		<property name="removeAbandonedTimeout" value="${jdbc.connection.removeAbandonedTimeout}"/>
		<property name="logAbandoned" value="${jdbc.connection.logAbandoned}"/>
	</bean> -->
	
	<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
	    <property name="driver" value="${jdbc.driver_class}"></property>
	    <property name="driverUrl" value="${jdbc.connection.url}"></property>
	    <property name="user" value="${jdbc.connection.username}" />
	    <property name="password" value="${jdbc.connection.password}" />
	    <!-- 别名 -->
	    <property name="alias" value="${jdbc.connection.alias}" />
	    <!-- proxool自动侦察各个连接状态的时间间隔(毫秒),侦察到空闲的连接就马上回收,超时的销毁 默认30秒） -->
	    <property name="houseKeepingSleepTime" value="${jdbc.connection.houseKeepingSleepTime}" />
	    <!-- 最大活动时间(超过此时间线程将被kill,默认为5分钟) -->
        <!--<property name="maximumActiveTime" value="${jdbc.connection.maximumActiveTime}"/> -->
	    <!-- 最少保持的空闲连接数 （默认2个） -->
	    <property name="prototypeCount" value="${jdbc.connection.prototypeCount}" />
	    <!-- 最大连接数 （默认5个） -->
	    <property name="maximumConnectionCount" value="${jdbc.connection.maximumConnectionCount}" />
	    <!-- 最小连接数 （默认2个） -->
	    <property name="minimumConnectionCount" value="${jdbc.connection.minimumConnectionCount}" />
	    <property name="simultaneousBuildThrottle" value="${jdbc.connection.simultaneousBuildThrottle}" />
	    <!-- 连接最长时间(默认为4个小时) -->
	    <property name="maximumConnectionLifetime" value="${jdbc.connection.maximumConnectionLifetime}" />
	    <!-- 测试的SQL执行语句 
	    <property name="houseKeepingTestSql" value="${jdbc.connection.houseKeepingTestSql}" />-->
	</bean>
	
	
    <!-- sessionFactory 
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">-->
    	<!-- 依赖注入SessionFactory所需的DataSource 
		<property name="dataSource" ref="dataSource"/>-->
		<!-- 下面指定Hibernate的属性 
        <property name="hibernateProperties">
	        <props>-->
		        <!-- 下面指定Hibernate使用的数据库方言 
		        <prop key="hibernate.dialect">${hibernate.dialect}</prop>
		        <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
		        <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
		        <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
		        <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
	        </props>
        </property>
    </bean>-->
    
 	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean> 
	
	<!-- 扫描Aspectj注解 -->
	<aop:aspectj-autoproxy />
	
	<!-- 添加task任务扫描注解支持  定时器 -->
	<task:annotation-driven />
	
	<!-- JPA 实体管理器工厂 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
		</property>
		<!-- 实体扫描路径 -->
		<property name="packagesToScan" value="com.**.entity" />
		<property name="jpaProperties" >
			<props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <!-- ImprovedNamingStrategy 会忽略@Column中的name 
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>-->
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            </props>
		</property>
	</bean>
	
	<!-- 配置JPA事务管理器    基于注解 -->
	<!-- transaction-manager指定使用哪个事务管理器 -->
	<tx:annotation-driven transaction-manager="jpaTransactionManager"/>
	<bean id="jpaTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
	
	<!-- 扫描spring组件 service -->
	<!-- spring bean的id是唯一的，当项目比较大的时候bean的id就有可能会重复，所以需要复写bean的id生成策略，
		 AnnotationBeanNameGenerator是bean的默认命名策略，实现了BeanNameGenerator接口。
		 在Service里面，如果不写bean的名称，那么默认的名曾是类名，但是第一个字母是小写的
		 可以写一个类继承自AnnotationBeanNameGenerator，重写buildDefaultBeanName方法
		 添加命名策略的配置：name-generator=""
	-->
	<context:component-scan base-package="com"
		name-generator="org.springframework.context.annotation.AnnotationBeanNameGenerator"
		scoped-proxy="interfaces">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
		<!-- <context:exclude-filter type="annotation"
			expression="com.sinosoft.spring.annotation.WebComponent" /> -->
	</context:component-scan>
	<!-- 配置Spring Data JPA扫描目录 Creating repository instances -->
	<jpa:repositories base-package="com.**.repository"
		transaction-manager-ref="jpaTransactionManager"
		entity-manager-factory-ref="entityManagerFactory"
		repository-impl-postfix="Impl"
		 />
		 <!-- factory-class="com.sinosoft.spring.jpa.repository.RepositoryFactoryBean" -->
</beans>
